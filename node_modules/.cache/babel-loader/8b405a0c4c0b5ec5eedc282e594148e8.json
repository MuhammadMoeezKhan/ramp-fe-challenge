{"ast":null,"code":"var _jsxFileName = \"/Users/moeezkhan/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isEmployeeTranscationsVisible, setIsEmployeeTranscationsVisible] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  let runningLength = 0;\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const [runningTranscations, setRunningTranscations] = useState(transactions);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll(); //B4: \n\n    setRunningTranscations(previousTranscation => [...(previousTranscation || []), ...((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [])]);\n    setIsEmployeeTranscationsVisible(false);\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    //B6:\n    setIsEmployeeTranscationsVisible(true);\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n\n    setRunningTranscations(transactions);\n    runningLength += runningTranscations ? runningTranscations.length : 0;\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        //Bug 5: Part A and B Solution: by changing the isLoading prop on the EMployee INput seleect from the isLoading varibale thats onyl changed when both emplpoyees and pagintatedTranscations are laoded to mployeeUtils.loading which is updated when the request for employess is successedd.\n        //This solves the second part of the bug as well becuase when we click view more and then click on the sleect which has all the employees, it no longer shows Loading.. becuase the employees were already loaded.\n        isLoading: employeeUtils.loading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          //B3\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: runningTranscations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), transactions !== null && !isEmployeeTranscationsVisible && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kS8rNG+BaNcpTIjeKnOEe7sGIY8=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isEmployeeTranscationsVisible","setIsEmployeeTranscationsVisible","isLoading","setIsLoading","runningLength","transactions","runningTranscations","setRunningTranscations","loadAllTransactions","invalidateData","fetchAll","previousTranscation","loadTransactionsByEmployee","employeeId","fetchById","loading","length","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/moeezkhan/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isEmployeeTranscationsVisible, setIsEmployeeTranscationsVisible] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  let runningLength = 0\n  \n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const [runningTranscations, setRunningTranscations] = useState(transactions)\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    //B4: \n    setRunningTranscations((previousTranscation) => [\n      ...(previousTranscation || []),\n      ...(paginatedTransactions?.data || [])\n    ]);\n\n    setIsEmployeeTranscationsVisible(false);\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      //B6:\n      setIsEmployeeTranscationsVisible(true);\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n    setRunningTranscations(transactions)\n    runningLength += runningTranscations ? runningTranscations.length : 0;\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          //Bug 5: Part A and B Solution: by changing the isLoading prop on the EMployee INput seleect from the isLoading varibale thats onyl changed when both emplpoyees and pagintatedTranscations are laoded to mployeeUtils.loading which is updated when the request for employess is successedd.\n          //This solves the second part of the bug as well becuase when we click view more and then click on the sleect which has all the employees, it no longer shows Loading.. becuase the employees were already loaded.\n          isLoading={employeeUtils.loading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            //B3\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions()\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {/* Bug 5 extension, replacing the transactions prop for this component will enable us to keep track of all\n          the transactions. Now transactions will not be replaced but we will have all the transations every time view more is clicked */}\n          <Transactions transactions={runningTranscations} />\n\n          {transactions !== null && \n           !isEmployeeTranscationsVisible && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}